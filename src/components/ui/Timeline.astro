---
import { twMerge } from "tailwind-merge";
import type { Item } from "~/types";

export interface Props {
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}



const { items = [], classes = {} } = Astro.props as Props;

const {
  container: containerClass = "",
  panel: panelClass = "",
  title: titleClass = "",
  description: descriptionClass = "",
  icon: defaultIconClass = "text-primary dark:text-slate-200 border-primary dark:border-blue-700",
} = classes;
---


<div class={containerClass}>
  {items.map(
    ({ title, description, icon, video, image, classes: itemClasses = {} }, index) => (
      <div class={twMerge("flex", panelClass, itemClasses?.panel)}>
        <div class="flex flex-col items-center mr-4 rtl:mr-0 rtl:ml-4">
          <div>
            <div class="flex items-center justify-center">
              {/* Render an img tag for images */}
              {icon && (
                <img
                  src={icon}
                  class={twMerge(
                    "w-[4rem] h-[4rem] min-w-[100px] min-h-[50px] object-contain", // Adjust size as needed
                    itemClasses?.icon || defaultIconClass
                  )}
                  alt=""
                />
              )}
            </div>
          </div>
          {index !== items.length - 1 && (
            <div class="w-px h-full bg-black/10 dark:bg-slate-400/50 mt-4" />
          )}
        </div>
        <div class={`pt-1 ${index !== items.length - 1 ? "pb-8" : ""}`}>
          {title && (
            <p
              class={twMerge(
                "text-xl font-bold",
                titleClass,
                itemClasses?.title
              )}
              set:html={title}
            />
          )}
          {description && (
            <p
              class={twMerge(
                "text-muted mt-2",
                descriptionClass,
                itemClasses?.description
              )}
              set:html={description}
            />
          )}
          {/* Render a video if provided */}
          {video && (
            <video controls width="640" class="rounded-md shadow-lg mt-4">
              <source src={video} type="video/mp4" />
              Your browser does not support the video tag.
            </video>
          )}
          {image && (
            <img
              src={image}
              class={twMerge(
                "w-[30rem] h-[30rem] object-contain",
                itemClasses?.image
              )}
              alt=""
            />
          )}
        </div>
      </div>
    )
  )}
</div>


